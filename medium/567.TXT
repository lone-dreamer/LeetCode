567. 字符串的排列
给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。

换句话说，第一个字符串的排列之一是第二个字符串的子串。

示例1:

输入: s1 = "ab" s2 = "eidbaooo"
输出: True
解释: s2 包含 s1 的排列之一 ("ba").
 

示例2:

输入: s1= "ab" s2 = "eidboaoo"
输出: False
 

注意：

输入的字符串只包含小写字母
两个字符串的长度都在 [1, 10,000] 之间


class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n = s1.size();
        int len = s2.size();
        if(n > len){
            return false;
        }
        vector<int>store1(26);
        vector<int>store2(26);
        for(auto c : s1){
            store1[c - 'a']++;
        }
        for(int i = 0;i<n;i++){
            store2[s2[i] - 'a']++;
        }
        if(store1 == store2){
            return true;
        }
        for(int i=n;i<len;i++){
           store2[s2[i - n] - 'a']--; 
           store2[s2[i] - 'a']++;
           if(store1 == store2){
               return true;
           }
        }
        return false;
    }
};



优化

注意到每次窗口滑动时，只统计了一进一出两个字符，却比较了整个 \textit{cnt}_1cnt 
1
​	
  和 \textit{cnt}_2cnt 
2
​	
  数组。

从这个角度出发，我们可以用一个变量 \textit{diff}diff 来记录 \textit{cnt}_1cnt 
1
​	
  与 \textit{cnt}_2cnt 
2
​	
  的不同值的个数，这样判断 \textit{cnt}_1cnt 
1
​	
  和 \textit{cnt}_2cnt 
2
​	
  是否相等就转换成了判断 \textit{diff}diff 是否为 00.

每次窗口滑动，记一进一出两个字符为 xx 和 yy.

若 x=yx=y 则对 \textit{cnt}_2cnt 
2
​	
  无影响，可以直接跳过。

若 x\ne yx 

​	
 =y，对于字符 xx，在修改 \textit{cnt}_2cnt 
2
​	
  之前若有 \textit{cnt}_2[x]=\textit{cnt}_1[x]cnt 
2
​	
 [x]=cnt 
1
​	
 [x]，则将 \textit{diff}diff 加一；在修改 \textit{cnt}_2cnt 
2
​	
  之后若有 \textit{cnt}_2[x]=\textit{cnt}_1[x]cnt 
2
​	
 [x]=cnt 
1
​	
 [x]，则将 \textit{diff}diff 减一。字符 yy 同理。

此外，为简化上述逻辑，我们可以只用一个数组 \textit{cnt}cnt，其中 \textit{cnt}[x]=\textit{cnt}_2[x]-\textit{cnt}_1[x]cnt[x]=cnt 
2
​	
 [x]−cnt 
1
​	
 [x]，将 \textit{cnt}_1[x]cnt 
1
​	
 [x] 与 \textit{cnt}_2[x]cnt 
2
​	
 [x] 的比较替换成 \textit{cnt}[x]cnt[x] 与 00 的比较。

C++JavaGolangCJavaScript

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n = s1.length(), m = s2.length();
        if (n > m) {
            return false;
        }
        vector<int> cnt(26);
        for (int i = 0; i < n; ++i) {
            --cnt[s1[i] - 'a'];
            ++cnt[s2[i] - 'a'];
        }
        int diff = 0;
        for (int c: cnt) {
            if (c != 0) {
                ++diff;
            }
        }
        if (diff == 0) {
            return true;
        }
        for (int i = n; i < m; ++i) {
            int x = s2[i] - 'a', y = s2[i - n] - 'a';
            if (x == y) {
                continue;
            }
            if (cnt[x] == 0) {
                ++diff;
            }
            ++cnt[x];
            if (cnt[x] == 0) {
                --diff;
            }
            if (cnt[y] == 0) {
                ++diff;
            }
            --cnt[y];
            if (cnt[y] == 0) {
                --diff;
            }
            if (diff == 0) {
                return true;
            }
        }
        return false;
    }
};
复杂度分析

时间复杂度：O(n+m+|\Sigma|)O(n+m+∣Σ∣)，其中 nn 是字符串 s_1s 
1
​	
  的长度，mm 是字符串 s_2s 
2
​	
  的长度，\SigmaΣ 是字符集，这道题中的字符集是小写字母，|\Sigma|=26∣Σ∣=26。

空间复杂度：O(|\Sigma|)O(∣Σ∣)。

方法二：双指针
回顾方法一的思路，我们在保证区间长度为 nn 的情况下，去考察是否存在一个区间使得 \textit{cnt}cnt 的值全为 00。

反过来，还可以在保证 \textit{cnt}cnt 的值不为正的情况下，去考察是否存在一个区间，其长度恰好为 nn。

初始时，仅统计 s_1s 
1
​	
  中的字符，则 \textit{cnt}cnt 的值均不为正，且元素值之和为 -n−n。

然后用两个指针 \textit{left}left 和 \textit{right}right 表示考察的区间 [\textit{left},\textit{right}][left,right]。\textit{right}right 每向右移动一次，就统计一次进入区间的字符 xx。为保证 \textit{cnt}cnt 的值不为正，若此时 \textit{cnt}[x]>0cnt[x]>0，则向右移动左指针，减少离开区间的字符的 \textit{cnt}cnt 值直到 \textit{cnt}[x] \le 0cnt[x]≤0。

注意到 [\textit{left},\textit{right}][left,right] 的长度每增加 11，\textit{cnt}cnt 的元素值之和就增加 11。当 [\textit{left},\textit{right}][left,right] 的长度恰好为 nn 时，就意味着 \textit{cnt}cnt 的元素值之和为 00。由于 \textit{cnt}cnt 的值不为正，元素值之和为 00 就意味着所有元素均为 00，这样我们就找到了一个目标子串。

C++JavaGolangCJavaScript

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n = s1.length(), m = s2.length();
        if (n > m) {
            return false;
        }
        vector<int> cnt(26);
        for (int i = 0; i < n; ++i) {
            --cnt[s1[i] - 'a'];
        }
        int left = 0;
        for (int right = 0; right < m; ++right) {
            int x = s2[right] - 'a';
            ++cnt[x];
            while (cnt[x] > 0) {
                --cnt[s2[left] - 'a'];
                ++left;
            }
            if (right - left + 1 == n) {
                return true;
            }
        }
        return false;
    }
};
复杂度分析

时间复杂度：O(n+m+|\Sigma|)O(n+m+∣Σ∣)。
创建 \textit{cnt}cnt 需要 O(|\Sigma|)O(∣Σ∣) 的时间。
遍历 s_1s 
1
​	
  需要 O(n)O(n) 的时间。
双指针遍历 s_2s 
2
​	
  时，由于 \textit{left}left 和 \textit{right}right 都只会向右移动，故这一部分需要 O(m)O(m) 的时间。

空间复杂度：O(|\Sigma|)O(∣Σ∣)。
