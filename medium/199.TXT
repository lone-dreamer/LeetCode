199. 二叉树的右视图
给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。

示例:

输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]
解释:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---


层序遍历

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> bfs(TreeNode * root){
        if(root == NULL){
            return {};
        }
        vector<int>res;
        queue<TreeNode*>store;
        if(root != NULL){
            store.push(root);
        }
        while(!store.empty()){
            int size = store.size();
            for(int i=0;i<size;i++){
                TreeNode * node = store.front();
                store.pop();
                if(node->left){
                    store.push(node->left);
                }
                if(node->right){
                    store.push(node->right);
                }
                if(i == size - 1){
                    res.push_back(node->val);
                }
            }
        }
        return res;
    }    
    vector<int> rightSideView(TreeNode* root) {
        return bfs(root);
    }
};



// class Solution {
//     public List<Integer> rightSideView(TreeNode root) {
//         List<Integer> res = new ArrayList<>();
//         if (root == null) {
//             return res;
//         }
//         Queue<TreeNode> queue = new LinkedList<>();
//         queue.offer(root);
//         while (!queue.isEmpty()) {
//             int size = queue.size();
//             for (int i = 0; i < size; i++) {
//                 TreeNode node = queue.poll();
//                 if (node.left != null) {
//                     queue.offer(node.left);
//                 }
//                 if (node.right != null) {
//                     queue.offer(node.right);
//                 }
//                 if (i == size - 1) {  //将当前层的最后一个节点放入结果列表
//                     res.add(node.val);
//                 }
//             }
//         }
//         return res;
//     }
// }
