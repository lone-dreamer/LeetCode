1319. 连通网络的操作次数
用以太网线缆将 n 台计算机连接成一个网络，计算机的编号从 0 到 n-1。线缆用 connections 表示，其中 connections[i] = [a, b] 连接了计算机 a 和 b。

网络中的任何一台计算机都可以通过网络直接或者间接访问同一个网络中其他任意一台计算机。

给你这个计算机网络的初始布线 connections，你可以拔开任意两台直连计算机之间的线缆，并用它连接一对未直连的计算机。请你计算并返回使所有计算机都连通所需的最少操作次数。如果不可能，则返回 -1 。 

 

示例 1：

输入：n = 4, connections = [[0,1],[0,2],[1,2]]
输出：1
解释：拔下计算机 1 和 2 之间的线缆，并将它插到计算机 1 和 3 上。
示例 2：

输入：n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
输出：2
示例 3：
输入：n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]
输出：-1
解释：线缆数量不足。
示例 4：

输入：n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]
输出：0





class Solution {
    int [] parent;
    int [] sz;
    int num;
    public int find(int x){
        if(parent[x] != x){
            x = find(parent[x]);
        }
        return x;
    }
    public void union(int x,int y){
        int m = find(x),n = find(y);
        if(m == n){
            return;
        }
        num -= 1;
        if(sz[m] < sz[n]){
            parent[m] = n;
            sz[m] += sz[n];
        }
        else{
            parent[n] = m;
            sz[m] += sz[n];
        }
    }
    public void init(int n){
        parent = new int[n];
        sz = new int[n];
        num = n;
        for(int i=0;i<n;i++){
            sz[i] = 1;
            parent[i] = i;
        }
    }

    public int makeConnected(int n, int[][] connections) {
        if(connections.length < n-1){
            return -1;
        }
        init(n);
        int cnt = 0;
        for(int []conn : connections){
            int x = conn[0],y = conn[1];
            if(find(x) == find(y)){
                cnt++;
                continue;
            }
            union(x,y);
        }
        int cnt2 = num - 1;
        
        if (cnt < cnt2) {
            return -1;
        }
        return cnt2;
    }
}

